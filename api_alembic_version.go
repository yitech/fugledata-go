/*
standard public schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugledata

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AlembicVersionAPIService AlembicVersionAPI service
type AlembicVersionAPIService service

type ApiAlembicVersionDeleteRequest struct {
	ctx context.Context
	ApiService *AlembicVersionAPIService
	versionNum *string
	prefer *string
}

func (r ApiAlembicVersionDeleteRequest) VersionNum(versionNum string) ApiAlembicVersionDeleteRequest {
	r.versionNum = &versionNum
	return r
}

// Preference
func (r ApiAlembicVersionDeleteRequest) Prefer(prefer string) ApiAlembicVersionDeleteRequest {
	r.prefer = &prefer
	return r
}

func (r ApiAlembicVersionDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlembicVersionDeleteExecute(r)
}

/*
AlembicVersionDelete Method for AlembicVersionDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlembicVersionDeleteRequest
*/
func (a *AlembicVersionAPIService) AlembicVersionDelete(ctx context.Context) ApiAlembicVersionDeleteRequest {
	return ApiAlembicVersionDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AlembicVersionAPIService) AlembicVersionDeleteExecute(r ApiAlembicVersionDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlembicVersionAPIService.AlembicVersionDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alembic_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.versionNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version_num", r.versionNum, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlembicVersionGetRequest struct {
	ctx context.Context
	ApiService *AlembicVersionAPIService
	versionNum *string
	select_ *string
	order *string
	range_ *string
	rangeUnit *string
	offset *string
	limit *string
	prefer *string
}

func (r ApiAlembicVersionGetRequest) VersionNum(versionNum string) ApiAlembicVersionGetRequest {
	r.versionNum = &versionNum
	return r
}

// Filtering Columns
func (r ApiAlembicVersionGetRequest) Select_(select_ string) ApiAlembicVersionGetRequest {
	r.select_ = &select_
	return r
}

// Ordering
func (r ApiAlembicVersionGetRequest) Order(order string) ApiAlembicVersionGetRequest {
	r.order = &order
	return r
}

// Limiting and Pagination
func (r ApiAlembicVersionGetRequest) Range_(range_ string) ApiAlembicVersionGetRequest {
	r.range_ = &range_
	return r
}

// Limiting and Pagination
func (r ApiAlembicVersionGetRequest) RangeUnit(rangeUnit string) ApiAlembicVersionGetRequest {
	r.rangeUnit = &rangeUnit
	return r
}

// Limiting and Pagination
func (r ApiAlembicVersionGetRequest) Offset(offset string) ApiAlembicVersionGetRequest {
	r.offset = &offset
	return r
}

// Limiting and Pagination
func (r ApiAlembicVersionGetRequest) Limit(limit string) ApiAlembicVersionGetRequest {
	r.limit = &limit
	return r
}

// Preference
func (r ApiAlembicVersionGetRequest) Prefer(prefer string) ApiAlembicVersionGetRequest {
	r.prefer = &prefer
	return r
}

func (r ApiAlembicVersionGetRequest) Execute() ([]AlembicVersion, *http.Response, error) {
	return r.ApiService.AlembicVersionGetExecute(r)
}

/*
AlembicVersionGet Method for AlembicVersionGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlembicVersionGetRequest
*/
func (a *AlembicVersionAPIService) AlembicVersionGet(ctx context.Context) ApiAlembicVersionGetRequest {
	return ApiAlembicVersionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AlembicVersion
func (a *AlembicVersionAPIService) AlembicVersionGetExecute(r ApiAlembicVersionGetRequest) ([]AlembicVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AlembicVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlembicVersionAPIService.AlembicVersionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alembic_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.versionNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version_num", r.versionNum, "", "")
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "", "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range", r.range_, "", "")
	}
	if r.rangeUnit != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range-Unit", r.rangeUnit, "", "")
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAlembicVersionPatchRequest struct {
	ctx context.Context
	ApiService *AlembicVersionAPIService
	versionNum *string
	prefer *string
	alembicVersion *AlembicVersion
}

func (r ApiAlembicVersionPatchRequest) VersionNum(versionNum string) ApiAlembicVersionPatchRequest {
	r.versionNum = &versionNum
	return r
}

// Preference
func (r ApiAlembicVersionPatchRequest) Prefer(prefer string) ApiAlembicVersionPatchRequest {
	r.prefer = &prefer
	return r
}

// alembic_version
func (r ApiAlembicVersionPatchRequest) AlembicVersion(alembicVersion AlembicVersion) ApiAlembicVersionPatchRequest {
	r.alembicVersion = &alembicVersion
	return r
}

func (r ApiAlembicVersionPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlembicVersionPatchExecute(r)
}

/*
AlembicVersionPatch Method for AlembicVersionPatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlembicVersionPatchRequest
*/
func (a *AlembicVersionAPIService) AlembicVersionPatch(ctx context.Context) ApiAlembicVersionPatchRequest {
	return ApiAlembicVersionPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AlembicVersionAPIService) AlembicVersionPatchExecute(r ApiAlembicVersionPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlembicVersionAPIService.AlembicVersionPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alembic_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.versionNum != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version_num", r.versionNum, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	// body params
	localVarPostBody = r.alembicVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAlembicVersionPostRequest struct {
	ctx context.Context
	ApiService *AlembicVersionAPIService
	select_ *string
	prefer *string
	alembicVersion *AlembicVersion
}

// Filtering Columns
func (r ApiAlembicVersionPostRequest) Select_(select_ string) ApiAlembicVersionPostRequest {
	r.select_ = &select_
	return r
}

// Preference
func (r ApiAlembicVersionPostRequest) Prefer(prefer string) ApiAlembicVersionPostRequest {
	r.prefer = &prefer
	return r
}

// alembic_version
func (r ApiAlembicVersionPostRequest) AlembicVersion(alembicVersion AlembicVersion) ApiAlembicVersionPostRequest {
	r.alembicVersion = &alembicVersion
	return r
}

func (r ApiAlembicVersionPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AlembicVersionPostExecute(r)
}

/*
AlembicVersionPost Method for AlembicVersionPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAlembicVersionPostRequest
*/
func (a *AlembicVersionAPIService) AlembicVersionPost(ctx context.Context) ApiAlembicVersionPostRequest {
	return ApiAlembicVersionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AlembicVersionAPIService) AlembicVersionPostExecute(r ApiAlembicVersionPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AlembicVersionAPIService.AlembicVersionPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/alembic_version"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	// body params
	localVarPostBody = r.alembicVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
