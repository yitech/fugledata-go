/*
standard public schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugledata

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Settlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Settlement{}

// Settlement struct for Settlement
type Settlement struct {
	Dt string `json:"dt"`
	NextDay *int32 `json:"next_day,omitempty"`
	AfterNext *int32 `json:"after_next,omitempty"`
	// Note: This is a Primary Key.<pk/>
	Id int32 `json:"id"`
}

type _Settlement Settlement

// NewSettlement instantiates a new Settlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettlement(dt string, id int32) *Settlement {
	this := Settlement{}
	this.Dt = dt
	this.Id = id
	return &this
}

// NewSettlementWithDefaults instantiates a new Settlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettlementWithDefaults() *Settlement {
	this := Settlement{}
	return &this
}

// GetDt returns the Dt field value
func (o *Settlement) GetDt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dt
}

// GetDtOk returns a tuple with the Dt field value
// and a boolean to check if the value has been set.
func (o *Settlement) GetDtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dt, true
}

// SetDt sets field value
func (o *Settlement) SetDt(v string) {
	o.Dt = v
}

// GetNextDay returns the NextDay field value if set, zero value otherwise.
func (o *Settlement) GetNextDay() int32 {
	if o == nil || IsNil(o.NextDay) {
		var ret int32
		return ret
	}
	return *o.NextDay
}

// GetNextDayOk returns a tuple with the NextDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetNextDayOk() (*int32, bool) {
	if o == nil || IsNil(o.NextDay) {
		return nil, false
	}
	return o.NextDay, true
}

// HasNextDay returns a boolean if a field has been set.
func (o *Settlement) HasNextDay() bool {
	if o != nil && !IsNil(o.NextDay) {
		return true
	}

	return false
}

// SetNextDay gets a reference to the given int32 and assigns it to the NextDay field.
func (o *Settlement) SetNextDay(v int32) {
	o.NextDay = &v
}

// GetAfterNext returns the AfterNext field value if set, zero value otherwise.
func (o *Settlement) GetAfterNext() int32 {
	if o == nil || IsNil(o.AfterNext) {
		var ret int32
		return ret
	}
	return *o.AfterNext
}

// GetAfterNextOk returns a tuple with the AfterNext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetAfterNextOk() (*int32, bool) {
	if o == nil || IsNil(o.AfterNext) {
		return nil, false
	}
	return o.AfterNext, true
}

// HasAfterNext returns a boolean if a field has been set.
func (o *Settlement) HasAfterNext() bool {
	if o != nil && !IsNil(o.AfterNext) {
		return true
	}

	return false
}

// SetAfterNext gets a reference to the given int32 and assigns it to the AfterNext field.
func (o *Settlement) SetAfterNext(v int32) {
	o.AfterNext = &v
}

// GetId returns the Id field value
func (o *Settlement) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Settlement) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Settlement) SetId(v int32) {
	o.Id = v
}

func (o Settlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Settlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dt"] = o.Dt
	if !IsNil(o.NextDay) {
		toSerialize["next_day"] = o.NextDay
	}
	if !IsNil(o.AfterNext) {
		toSerialize["after_next"] = o.AfterNext
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *Settlement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dt",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSettlement := _Settlement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSettlement)

	if err != nil {
		return err
	}

	*o = Settlement(varSettlement)

	return err
}

type NullableSettlement struct {
	value *Settlement
	isSet bool
}

func (v NullableSettlement) Get() *Settlement {
	return v.value
}

func (v *NullableSettlement) Set(val *Settlement) {
	v.value = val
	v.isSet = true
}

func (v NullableSettlement) IsSet() bool {
	return v.isSet
}

func (v *NullableSettlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettlement(val *Settlement) *NullableSettlement {
	return &NullableSettlement{value: val, isSet: true}
}

func (v NullableSettlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


