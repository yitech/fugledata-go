/*
standard public schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugledata

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Kline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Kline{}

// Kline struct for Kline
type Kline struct {
	// Note: This is a Primary Key.<pk/>
	Id int32 `json:"id"`
	Symbol string `json:"symbol"`
	Dt string `json:"dt"`
	Open float32 `json:"open"`
	High float32 `json:"high"`
	Low float32 `json:"low"`
	Close float32 `json:"close"`
	Volume int32 `json:"volume"`
}

type _Kline Kline

// NewKline instantiates a new Kline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKline(id int32, symbol string, dt string, open float32, high float32, low float32, close float32, volume int32) *Kline {
	this := Kline{}
	this.Id = id
	this.Symbol = symbol
	this.Dt = dt
	this.Open = open
	this.High = high
	this.Low = low
	this.Close = close
	this.Volume = volume
	return &this
}

// NewKlineWithDefaults instantiates a new Kline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKlineWithDefaults() *Kline {
	this := Kline{}
	return &this
}

// GetId returns the Id field value
func (o *Kline) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Kline) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Kline) SetId(v int32) {
	o.Id = v
}

// GetSymbol returns the Symbol field value
func (o *Kline) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *Kline) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *Kline) SetSymbol(v string) {
	o.Symbol = v
}

// GetDt returns the Dt field value
func (o *Kline) GetDt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dt
}

// GetDtOk returns a tuple with the Dt field value
// and a boolean to check if the value has been set.
func (o *Kline) GetDtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dt, true
}

// SetDt sets field value
func (o *Kline) SetDt(v string) {
	o.Dt = v
}

// GetOpen returns the Open field value
func (o *Kline) GetOpen() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Open
}

// GetOpenOk returns a tuple with the Open field value
// and a boolean to check if the value has been set.
func (o *Kline) GetOpenOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Open, true
}

// SetOpen sets field value
func (o *Kline) SetOpen(v float32) {
	o.Open = v
}

// GetHigh returns the High field value
func (o *Kline) GetHigh() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.High
}

// GetHighOk returns a tuple with the High field value
// and a boolean to check if the value has been set.
func (o *Kline) GetHighOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.High, true
}

// SetHigh sets field value
func (o *Kline) SetHigh(v float32) {
	o.High = v
}

// GetLow returns the Low field value
func (o *Kline) GetLow() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Low
}

// GetLowOk returns a tuple with the Low field value
// and a boolean to check if the value has been set.
func (o *Kline) GetLowOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Low, true
}

// SetLow sets field value
func (o *Kline) SetLow(v float32) {
	o.Low = v
}

// GetClose returns the Close field value
func (o *Kline) GetClose() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Close
}

// GetCloseOk returns a tuple with the Close field value
// and a boolean to check if the value has been set.
func (o *Kline) GetCloseOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Close, true
}

// SetClose sets field value
func (o *Kline) SetClose(v float32) {
	o.Close = v
}

// GetVolume returns the Volume field value
func (o *Kline) GetVolume() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
func (o *Kline) GetVolumeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volume, true
}

// SetVolume sets field value
func (o *Kline) SetVolume(v int32) {
	o.Volume = v
}

func (o Kline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Kline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["symbol"] = o.Symbol
	toSerialize["dt"] = o.Dt
	toSerialize["open"] = o.Open
	toSerialize["high"] = o.High
	toSerialize["low"] = o.Low
	toSerialize["close"] = o.Close
	toSerialize["volume"] = o.Volume
	return toSerialize, nil
}

func (o *Kline) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"symbol",
		"dt",
		"open",
		"high",
		"low",
		"close",
		"volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKline := _Kline{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKline)

	if err != nil {
		return err
	}

	*o = Kline(varKline)

	return err
}

type NullableKline struct {
	value *Kline
	isSet bool
}

func (v NullableKline) Get() *Kline {
	return v.value
}

func (v *NullableKline) Set(val *Kline) {
	v.value = val
	v.isSet = true
}

func (v NullableKline) IsSet() bool {
	return v.isSet
}

func (v *NullableKline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKline(val *Kline) *NullableKline {
	return &NullableKline{value: val, isSet: true}
}

func (v NullableKline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


