/*
standard public schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugledata

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// BalanceAPIService BalanceAPI service
type BalanceAPIService service

type ApiBalanceDeleteRequest struct {
	ctx context.Context
	ApiService *BalanceAPIService
	dt *string
	available *string
	id *string
	prefer *string
}

func (r ApiBalanceDeleteRequest) Dt(dt string) ApiBalanceDeleteRequest {
	r.dt = &dt
	return r
}

func (r ApiBalanceDeleteRequest) Available(available string) ApiBalanceDeleteRequest {
	r.available = &available
	return r
}

func (r ApiBalanceDeleteRequest) Id(id string) ApiBalanceDeleteRequest {
	r.id = &id
	return r
}

// Preference
func (r ApiBalanceDeleteRequest) Prefer(prefer string) ApiBalanceDeleteRequest {
	r.prefer = &prefer
	return r
}

func (r ApiBalanceDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.BalanceDeleteExecute(r)
}

/*
BalanceDelete Method for BalanceDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBalanceDeleteRequest
*/
func (a *BalanceAPIService) BalanceDelete(ctx context.Context) ApiBalanceDeleteRequest {
	return ApiBalanceDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BalanceAPIService) BalanceDeleteExecute(r ApiBalanceDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BalanceAPIService.BalanceDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.available != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "available", r.available, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBalanceGetRequest struct {
	ctx context.Context
	ApiService *BalanceAPIService
	dt *string
	available *string
	id *string
	select_ *string
	order *string
	range_ *string
	rangeUnit *string
	offset *string
	limit *string
	prefer *string
}

func (r ApiBalanceGetRequest) Dt(dt string) ApiBalanceGetRequest {
	r.dt = &dt
	return r
}

func (r ApiBalanceGetRequest) Available(available string) ApiBalanceGetRequest {
	r.available = &available
	return r
}

func (r ApiBalanceGetRequest) Id(id string) ApiBalanceGetRequest {
	r.id = &id
	return r
}

// Filtering Columns
func (r ApiBalanceGetRequest) Select_(select_ string) ApiBalanceGetRequest {
	r.select_ = &select_
	return r
}

// Ordering
func (r ApiBalanceGetRequest) Order(order string) ApiBalanceGetRequest {
	r.order = &order
	return r
}

// Limiting and Pagination
func (r ApiBalanceGetRequest) Range_(range_ string) ApiBalanceGetRequest {
	r.range_ = &range_
	return r
}

// Limiting and Pagination
func (r ApiBalanceGetRequest) RangeUnit(rangeUnit string) ApiBalanceGetRequest {
	r.rangeUnit = &rangeUnit
	return r
}

// Limiting and Pagination
func (r ApiBalanceGetRequest) Offset(offset string) ApiBalanceGetRequest {
	r.offset = &offset
	return r
}

// Limiting and Pagination
func (r ApiBalanceGetRequest) Limit(limit string) ApiBalanceGetRequest {
	r.limit = &limit
	return r
}

// Preference
func (r ApiBalanceGetRequest) Prefer(prefer string) ApiBalanceGetRequest {
	r.prefer = &prefer
	return r
}

func (r ApiBalanceGetRequest) Execute() ([]Balance, *http.Response, error) {
	return r.ApiService.BalanceGetExecute(r)
}

/*
BalanceGet Method for BalanceGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBalanceGetRequest
*/
func (a *BalanceAPIService) BalanceGet(ctx context.Context) ApiBalanceGetRequest {
	return ApiBalanceGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Balance
func (a *BalanceAPIService) BalanceGetExecute(r ApiBalanceGetRequest) ([]Balance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Balance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BalanceAPIService.BalanceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.available != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "available", r.available, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "", "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range", r.range_, "", "")
	}
	if r.rangeUnit != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range-Unit", r.rangeUnit, "", "")
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBalancePatchRequest struct {
	ctx context.Context
	ApiService *BalanceAPIService
	dt *string
	available *string
	id *string
	prefer *string
	balance *Balance
}

func (r ApiBalancePatchRequest) Dt(dt string) ApiBalancePatchRequest {
	r.dt = &dt
	return r
}

func (r ApiBalancePatchRequest) Available(available string) ApiBalancePatchRequest {
	r.available = &available
	return r
}

func (r ApiBalancePatchRequest) Id(id string) ApiBalancePatchRequest {
	r.id = &id
	return r
}

// Preference
func (r ApiBalancePatchRequest) Prefer(prefer string) ApiBalancePatchRequest {
	r.prefer = &prefer
	return r
}

// balance
func (r ApiBalancePatchRequest) Balance(balance Balance) ApiBalancePatchRequest {
	r.balance = &balance
	return r
}

func (r ApiBalancePatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.BalancePatchExecute(r)
}

/*
BalancePatch Method for BalancePatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBalancePatchRequest
*/
func (a *BalanceAPIService) BalancePatch(ctx context.Context) ApiBalancePatchRequest {
	return ApiBalancePatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BalanceAPIService) BalancePatchExecute(r ApiBalancePatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BalanceAPIService.BalancePatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.available != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "available", r.available, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	// body params
	localVarPostBody = r.balance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBalancePostRequest struct {
	ctx context.Context
	ApiService *BalanceAPIService
	select_ *string
	prefer *string
	balance *Balance
}

// Filtering Columns
func (r ApiBalancePostRequest) Select_(select_ string) ApiBalancePostRequest {
	r.select_ = &select_
	return r
}

// Preference
func (r ApiBalancePostRequest) Prefer(prefer string) ApiBalancePostRequest {
	r.prefer = &prefer
	return r
}

// balance
func (r ApiBalancePostRequest) Balance(balance Balance) ApiBalancePostRequest {
	r.balance = &balance
	return r
}

func (r ApiBalancePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.BalancePostExecute(r)
}

/*
BalancePost Method for BalancePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBalancePostRequest
*/
func (a *BalanceAPIService) BalancePost(ctx context.Context) ApiBalancePostRequest {
	return ApiBalancePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *BalanceAPIService) BalancePostExecute(r ApiBalancePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BalanceAPIService.BalancePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/balance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	// body params
	localVarPostBody = r.balance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
