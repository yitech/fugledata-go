/*
standard public schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugledata

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MarketMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketMetadata{}

// MarketMetadata struct for MarketMetadata
type MarketMetadata struct {
	// Note: This is a Primary Key.<pk/>
	Id int32 `json:"id"`
	Symbol string `json:"symbol"`
	Category *string `json:"category,omitempty"`
}

type _MarketMetadata MarketMetadata

// NewMarketMetadata instantiates a new MarketMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketMetadata(id int32, symbol string) *MarketMetadata {
	this := MarketMetadata{}
	this.Id = id
	this.Symbol = symbol
	return &this
}

// NewMarketMetadataWithDefaults instantiates a new MarketMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketMetadataWithDefaults() *MarketMetadata {
	this := MarketMetadata{}
	return &this
}

// GetId returns the Id field value
func (o *MarketMetadata) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MarketMetadata) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MarketMetadata) SetId(v int32) {
	o.Id = v
}

// GetSymbol returns the Symbol field value
func (o *MarketMetadata) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *MarketMetadata) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *MarketMetadata) SetSymbol(v string) {
	o.Symbol = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *MarketMetadata) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketMetadata) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *MarketMetadata) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *MarketMetadata) SetCategory(v string) {
	o.Category = &v
}

func (o MarketMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["symbol"] = o.Symbol
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	return toSerialize, nil
}

func (o *MarketMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"symbol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarketMetadata := _MarketMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarketMetadata)

	if err != nil {
		return err
	}

	*o = MarketMetadata(varMarketMetadata)

	return err
}

type NullableMarketMetadata struct {
	value *MarketMetadata
	isSet bool
}

func (v NullableMarketMetadata) Get() *MarketMetadata {
	return v.value
}

func (v *NullableMarketMetadata) Set(val *MarketMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketMetadata(val *MarketMetadata) *NullableMarketMetadata {
	return &NullableMarketMetadata{value: val, isSet: true}
}

func (v NullableMarketMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


