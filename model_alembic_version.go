/*
standard public schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugledata

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlembicVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlembicVersion{}

// AlembicVersion struct for AlembicVersion
type AlembicVersion struct {
	// Note: This is a Primary Key.<pk/>
	VersionNum string `json:"version_num"`
}

type _AlembicVersion AlembicVersion

// NewAlembicVersion instantiates a new AlembicVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlembicVersion(versionNum string) *AlembicVersion {
	this := AlembicVersion{}
	this.VersionNum = versionNum
	return &this
}

// NewAlembicVersionWithDefaults instantiates a new AlembicVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlembicVersionWithDefaults() *AlembicVersion {
	this := AlembicVersion{}
	return &this
}

// GetVersionNum returns the VersionNum field value
func (o *AlembicVersion) GetVersionNum() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionNum
}

// GetVersionNumOk returns a tuple with the VersionNum field value
// and a boolean to check if the value has been set.
func (o *AlembicVersion) GetVersionNumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionNum, true
}

// SetVersionNum sets field value
func (o *AlembicVersion) SetVersionNum(v string) {
	o.VersionNum = v
}

func (o AlembicVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlembicVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version_num"] = o.VersionNum
	return toSerialize, nil
}

func (o *AlembicVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version_num",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlembicVersion := _AlembicVersion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlembicVersion)

	if err != nil {
		return err
	}

	*o = AlembicVersion(varAlembicVersion)

	return err
}

type NullableAlembicVersion struct {
	value *AlembicVersion
	isSet bool
}

func (v NullableAlembicVersion) Get() *AlembicVersion {
	return v.value
}

func (v *NullableAlembicVersion) Set(val *AlembicVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAlembicVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAlembicVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlembicVersion(val *AlembicVersion) *NullableAlembicVersion {
	return &NullableAlembicVersion{value: val, isSet: true}
}

func (v NullableAlembicVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlembicVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


