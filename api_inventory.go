/*
standard public schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugledata

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// InventoryAPIService InventoryAPI service
type InventoryAPIService service

type ApiInventoryDeleteRequest struct {
	ctx context.Context
	ApiService *InventoryAPIService
	dt *string
	symbol *string
	numShare *string
	id *string
	prefer *string
}

func (r ApiInventoryDeleteRequest) Dt(dt string) ApiInventoryDeleteRequest {
	r.dt = &dt
	return r
}

func (r ApiInventoryDeleteRequest) Symbol(symbol string) ApiInventoryDeleteRequest {
	r.symbol = &symbol
	return r
}

func (r ApiInventoryDeleteRequest) NumShare(numShare string) ApiInventoryDeleteRequest {
	r.numShare = &numShare
	return r
}

func (r ApiInventoryDeleteRequest) Id(id string) ApiInventoryDeleteRequest {
	r.id = &id
	return r
}

// Preference
func (r ApiInventoryDeleteRequest) Prefer(prefer string) ApiInventoryDeleteRequest {
	r.prefer = &prefer
	return r
}

func (r ApiInventoryDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.InventoryDeleteExecute(r)
}

/*
InventoryDelete Method for InventoryDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInventoryDeleteRequest
*/
func (a *InventoryAPIService) InventoryDelete(ctx context.Context) ApiInventoryDeleteRequest {
	return ApiInventoryDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InventoryAPIService) InventoryDeleteExecute(r ApiInventoryDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryAPIService.InventoryDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "", "")
	}
	if r.numShare != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "num_share", r.numShare, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInventoryGetRequest struct {
	ctx context.Context
	ApiService *InventoryAPIService
	dt *string
	symbol *string
	numShare *string
	id *string
	select_ *string
	order *string
	range_ *string
	rangeUnit *string
	offset *string
	limit *string
	prefer *string
}

func (r ApiInventoryGetRequest) Dt(dt string) ApiInventoryGetRequest {
	r.dt = &dt
	return r
}

func (r ApiInventoryGetRequest) Symbol(symbol string) ApiInventoryGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiInventoryGetRequest) NumShare(numShare string) ApiInventoryGetRequest {
	r.numShare = &numShare
	return r
}

func (r ApiInventoryGetRequest) Id(id string) ApiInventoryGetRequest {
	r.id = &id
	return r
}

// Filtering Columns
func (r ApiInventoryGetRequest) Select_(select_ string) ApiInventoryGetRequest {
	r.select_ = &select_
	return r
}

// Ordering
func (r ApiInventoryGetRequest) Order(order string) ApiInventoryGetRequest {
	r.order = &order
	return r
}

// Limiting and Pagination
func (r ApiInventoryGetRequest) Range_(range_ string) ApiInventoryGetRequest {
	r.range_ = &range_
	return r
}

// Limiting and Pagination
func (r ApiInventoryGetRequest) RangeUnit(rangeUnit string) ApiInventoryGetRequest {
	r.rangeUnit = &rangeUnit
	return r
}

// Limiting and Pagination
func (r ApiInventoryGetRequest) Offset(offset string) ApiInventoryGetRequest {
	r.offset = &offset
	return r
}

// Limiting and Pagination
func (r ApiInventoryGetRequest) Limit(limit string) ApiInventoryGetRequest {
	r.limit = &limit
	return r
}

// Preference
func (r ApiInventoryGetRequest) Prefer(prefer string) ApiInventoryGetRequest {
	r.prefer = &prefer
	return r
}

func (r ApiInventoryGetRequest) Execute() ([]Inventory, *http.Response, error) {
	return r.ApiService.InventoryGetExecute(r)
}

/*
InventoryGet Method for InventoryGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInventoryGetRequest
*/
func (a *InventoryAPIService) InventoryGet(ctx context.Context) ApiInventoryGetRequest {
	return ApiInventoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Inventory
func (a *InventoryAPIService) InventoryGetExecute(r ApiInventoryGetRequest) ([]Inventory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Inventory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryAPIService.InventoryGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "", "")
	}
	if r.numShare != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "num_share", r.numShare, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "", "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range", r.range_, "", "")
	}
	if r.rangeUnit != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range-Unit", r.rangeUnit, "", "")
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInventoryPatchRequest struct {
	ctx context.Context
	ApiService *InventoryAPIService
	dt *string
	symbol *string
	numShare *string
	id *string
	prefer *string
	inventory *Inventory
}

func (r ApiInventoryPatchRequest) Dt(dt string) ApiInventoryPatchRequest {
	r.dt = &dt
	return r
}

func (r ApiInventoryPatchRequest) Symbol(symbol string) ApiInventoryPatchRequest {
	r.symbol = &symbol
	return r
}

func (r ApiInventoryPatchRequest) NumShare(numShare string) ApiInventoryPatchRequest {
	r.numShare = &numShare
	return r
}

func (r ApiInventoryPatchRequest) Id(id string) ApiInventoryPatchRequest {
	r.id = &id
	return r
}

// Preference
func (r ApiInventoryPatchRequest) Prefer(prefer string) ApiInventoryPatchRequest {
	r.prefer = &prefer
	return r
}

// inventory
func (r ApiInventoryPatchRequest) Inventory(inventory Inventory) ApiInventoryPatchRequest {
	r.inventory = &inventory
	return r
}

func (r ApiInventoryPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.InventoryPatchExecute(r)
}

/*
InventoryPatch Method for InventoryPatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInventoryPatchRequest
*/
func (a *InventoryAPIService) InventoryPatch(ctx context.Context) ApiInventoryPatchRequest {
	return ApiInventoryPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InventoryAPIService) InventoryPatchExecute(r ApiInventoryPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryAPIService.InventoryPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "", "")
	}
	if r.numShare != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "num_share", r.numShare, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	// body params
	localVarPostBody = r.inventory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInventoryPostRequest struct {
	ctx context.Context
	ApiService *InventoryAPIService
	select_ *string
	prefer *string
	inventory *Inventory
}

// Filtering Columns
func (r ApiInventoryPostRequest) Select_(select_ string) ApiInventoryPostRequest {
	r.select_ = &select_
	return r
}

// Preference
func (r ApiInventoryPostRequest) Prefer(prefer string) ApiInventoryPostRequest {
	r.prefer = &prefer
	return r
}

// inventory
func (r ApiInventoryPostRequest) Inventory(inventory Inventory) ApiInventoryPostRequest {
	r.inventory = &inventory
	return r
}

func (r ApiInventoryPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InventoryPostExecute(r)
}

/*
InventoryPost Method for InventoryPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInventoryPostRequest
*/
func (a *InventoryAPIService) InventoryPost(ctx context.Context) ApiInventoryPostRequest {
	return ApiInventoryPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InventoryAPIService) InventoryPostExecute(r ApiInventoryPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryAPIService.InventoryPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	// body params
	localVarPostBody = r.inventory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
