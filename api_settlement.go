/*
standard public schema

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 12.2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fugledata

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SettlementAPIService SettlementAPI service
type SettlementAPIService service

type ApiSettlementDeleteRequest struct {
	ctx context.Context
	ApiService *SettlementAPIService
	dt *string
	nextDay *string
	afterNext *string
	id *string
	prefer *string
}

func (r ApiSettlementDeleteRequest) Dt(dt string) ApiSettlementDeleteRequest {
	r.dt = &dt
	return r
}

func (r ApiSettlementDeleteRequest) NextDay(nextDay string) ApiSettlementDeleteRequest {
	r.nextDay = &nextDay
	return r
}

func (r ApiSettlementDeleteRequest) AfterNext(afterNext string) ApiSettlementDeleteRequest {
	r.afterNext = &afterNext
	return r
}

func (r ApiSettlementDeleteRequest) Id(id string) ApiSettlementDeleteRequest {
	r.id = &id
	return r
}

// Preference
func (r ApiSettlementDeleteRequest) Prefer(prefer string) ApiSettlementDeleteRequest {
	r.prefer = &prefer
	return r
}

func (r ApiSettlementDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.SettlementDeleteExecute(r)
}

/*
SettlementDelete Method for SettlementDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSettlementDeleteRequest
*/
func (a *SettlementAPIService) SettlementDelete(ctx context.Context) ApiSettlementDeleteRequest {
	return ApiSettlementDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SettlementAPIService) SettlementDeleteExecute(r ApiSettlementDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SettlementAPIService.SettlementDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settlement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.nextDay != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "next_day", r.nextDay, "", "")
	}
	if r.afterNext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after_next", r.afterNext, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSettlementGetRequest struct {
	ctx context.Context
	ApiService *SettlementAPIService
	dt *string
	nextDay *string
	afterNext *string
	id *string
	select_ *string
	order *string
	range_ *string
	rangeUnit *string
	offset *string
	limit *string
	prefer *string
}

func (r ApiSettlementGetRequest) Dt(dt string) ApiSettlementGetRequest {
	r.dt = &dt
	return r
}

func (r ApiSettlementGetRequest) NextDay(nextDay string) ApiSettlementGetRequest {
	r.nextDay = &nextDay
	return r
}

func (r ApiSettlementGetRequest) AfterNext(afterNext string) ApiSettlementGetRequest {
	r.afterNext = &afterNext
	return r
}

func (r ApiSettlementGetRequest) Id(id string) ApiSettlementGetRequest {
	r.id = &id
	return r
}

// Filtering Columns
func (r ApiSettlementGetRequest) Select_(select_ string) ApiSettlementGetRequest {
	r.select_ = &select_
	return r
}

// Ordering
func (r ApiSettlementGetRequest) Order(order string) ApiSettlementGetRequest {
	r.order = &order
	return r
}

// Limiting and Pagination
func (r ApiSettlementGetRequest) Range_(range_ string) ApiSettlementGetRequest {
	r.range_ = &range_
	return r
}

// Limiting and Pagination
func (r ApiSettlementGetRequest) RangeUnit(rangeUnit string) ApiSettlementGetRequest {
	r.rangeUnit = &rangeUnit
	return r
}

// Limiting and Pagination
func (r ApiSettlementGetRequest) Offset(offset string) ApiSettlementGetRequest {
	r.offset = &offset
	return r
}

// Limiting and Pagination
func (r ApiSettlementGetRequest) Limit(limit string) ApiSettlementGetRequest {
	r.limit = &limit
	return r
}

// Preference
func (r ApiSettlementGetRequest) Prefer(prefer string) ApiSettlementGetRequest {
	r.prefer = &prefer
	return r
}

func (r ApiSettlementGetRequest) Execute() ([]Settlement, *http.Response, error) {
	return r.ApiService.SettlementGetExecute(r)
}

/*
SettlementGet Method for SettlementGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSettlementGetRequest
*/
func (a *SettlementAPIService) SettlementGet(ctx context.Context) ApiSettlementGetRequest {
	return ApiSettlementGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Settlement
func (a *SettlementAPIService) SettlementGetExecute(r ApiSettlementGetRequest) ([]Settlement, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Settlement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SettlementAPIService.SettlementGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settlement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.nextDay != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "next_day", r.nextDay, "", "")
	}
	if r.afterNext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after_next", r.afterNext, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "", "")
	}
	if r.order != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range", r.range_, "", "")
	}
	if r.rangeUnit != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Range-Unit", r.rangeUnit, "", "")
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSettlementPatchRequest struct {
	ctx context.Context
	ApiService *SettlementAPIService
	dt *string
	nextDay *string
	afterNext *string
	id *string
	prefer *string
	settlement *Settlement
}

func (r ApiSettlementPatchRequest) Dt(dt string) ApiSettlementPatchRequest {
	r.dt = &dt
	return r
}

func (r ApiSettlementPatchRequest) NextDay(nextDay string) ApiSettlementPatchRequest {
	r.nextDay = &nextDay
	return r
}

func (r ApiSettlementPatchRequest) AfterNext(afterNext string) ApiSettlementPatchRequest {
	r.afterNext = &afterNext
	return r
}

func (r ApiSettlementPatchRequest) Id(id string) ApiSettlementPatchRequest {
	r.id = &id
	return r
}

// Preference
func (r ApiSettlementPatchRequest) Prefer(prefer string) ApiSettlementPatchRequest {
	r.prefer = &prefer
	return r
}

// settlement
func (r ApiSettlementPatchRequest) Settlement(settlement Settlement) ApiSettlementPatchRequest {
	r.settlement = &settlement
	return r
}

func (r ApiSettlementPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.SettlementPatchExecute(r)
}

/*
SettlementPatch Method for SettlementPatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSettlementPatchRequest
*/
func (a *SettlementAPIService) SettlementPatch(ctx context.Context) ApiSettlementPatchRequest {
	return ApiSettlementPatchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SettlementAPIService) SettlementPatchExecute(r ApiSettlementPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SettlementAPIService.SettlementPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settlement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.dt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dt", r.dt, "", "")
	}
	if r.nextDay != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "next_day", r.nextDay, "", "")
	}
	if r.afterNext != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after_next", r.afterNext, "", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	// body params
	localVarPostBody = r.settlement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSettlementPostRequest struct {
	ctx context.Context
	ApiService *SettlementAPIService
	select_ *string
	prefer *string
	settlement *Settlement
}

// Filtering Columns
func (r ApiSettlementPostRequest) Select_(select_ string) ApiSettlementPostRequest {
	r.select_ = &select_
	return r
}

// Preference
func (r ApiSettlementPostRequest) Prefer(prefer string) ApiSettlementPostRequest {
	r.prefer = &prefer
	return r
}

// settlement
func (r ApiSettlementPostRequest) Settlement(settlement Settlement) ApiSettlementPostRequest {
	r.settlement = &settlement
	return r
}

func (r ApiSettlementPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SettlementPostExecute(r)
}

/*
SettlementPost Method for SettlementPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSettlementPostRequest
*/
func (a *SettlementAPIService) SettlementPost(ctx context.Context) ApiSettlementPostRequest {
	return ApiSettlementPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SettlementAPIService) SettlementPostExecute(r ApiSettlementPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SettlementAPIService.SettlementPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/settlement"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.select_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "select", r.select_, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/vnd.pgrst.object+json;nulls=stripped", "application/vnd.pgrst.object+json", "text/csv"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.prefer != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Prefer", r.prefer, "", "")
	}
	// body params
	localVarPostBody = r.settlement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
